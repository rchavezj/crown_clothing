{"ast":null,"code":"import _objectSpread from \"/Users/user/Github/crown_clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCkjA-b6_4miXNrrTsp69z5B3oDmKbALQA\",\n  authDomain: \"crwn-db-bc7b4.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-bc7b4.firebaseio.com\",\n  projectId: \"crwn-db-bc7b4\",\n  storageBucket: \"crwn-db-bc7b4.appspot.com\",\n  messagingSenderId: \"229670806736\",\n  appId: \"1:229670806736:web:9a66ced53b86398c37aad5\",\n  measurementId: \"G-Z2Q8TQFVSJ\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // Retrieve the user's reference id inside the database\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // Similar to collectionReference except used to retrieve data. \n\n  const snapShot = await userRef.get(); // If data exist for the user\n\n  if (!snapShot.exists) {\n    // destruct the userAuth properties for displayName and email\n    const displayName = userAuth.displayName,\n          email = userAuth.email; // Log the date\n\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user: ', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // Google authintication utility\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/user/Github/crown_clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,WAAW,EAAE,sCAHA;AAIbC,EAAAA,SAAS,EAAE,eAJE;AAKbC,EAAAA,aAAa,EAAE,2BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAYA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAG,CAACD,QAAJ,EAAc,OAD6D,CAG3E;;AACA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB,CAJ2E,CAK3E;;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAN2E,CAQ3E;;AACA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB;AADoB,UAEZC,WAFY,GAEWT,QAFX,CAEZS,WAFY;AAAA,UAECC,KAFD,GAEWV,QAFX,CAECU,KAFD,EAGpB;;AACA,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAG;AACD,YAAMV,OAAO,CAACW,GAAR;AACJJ,QAAAA,WADI;AAEJC,QAAAA,KAFI;AAGJC,QAAAA;AAHI,SAIDV,cAJC,EAAN;AAMD,KAPD,CAOC,OAAOa,KAAP,EAAa;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,KAAK,CAACG,OAA3C;AACD;AACF;;AACD,SAAOf,OAAP;AACD,CA1BM;AA8BPb,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB;AAEA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB,C,CAEP;;AACA,MAAMiB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAGP,eAAe/B,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: \"AIzaSyCkjA-b6_4miXNrrTsp69z5B3oDmKbALQA\",\n  authDomain: \"crwn-db-bc7b4.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-bc7b4.firebaseio.com\",\n  projectId: \"crwn-db-bc7b4\",\n  storageBucket: \"crwn-db-bc7b4.appspot.com\",\n  messagingSenderId: \"229670806736\",\n  appId: \"1:229670806736:web:9a66ced53b86398c37aad5\",\n  measurementId: \"G-Z2Q8TQFVSJ\"\n};\n\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if(!userAuth) return;\n\n  // Retrieve the user's reference id inside the database\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  // Similar to collectionReference except used to retrieve data. \n  const snapShot = await userRef.get();\n\n  // If data exist for the user\n  if (!snapShot.exists) {\n    // destruct the userAuth properties for displayName and email\n    const { displayName, email } = userAuth;\n    // Log the date\n    const createdAt = new Date();\n    try{\n      await userRef.set({\n        displayName, \n        email,\n        createdAt,\n        ...additionalData\n      })\n    }catch (error){\n      console.log('error creating user: ', error.message);\n    }\n  }\n  return userRef;\n}\n\n\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n// Google authintication utility\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}