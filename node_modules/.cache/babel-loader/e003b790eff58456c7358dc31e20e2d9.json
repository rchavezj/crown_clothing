{"ast":null,"code":"var _jsxFileName = \"/Users/user/Github/crown_clothing/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport { setCurrentUser } from \"./redux/user/user.actions\";\nimport { auth, createUserProfileDocument } from \"./firebase/firebase.utils\";\nimport ShopPage from './pages/shop/shop.component';\nimport Header from \"./components/header/header.component\";\nimport HomePage from './pages/homepage/homepage.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    const {\n      setCurrentUser\n    } = this.props;\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      // Check if the userAuth\n      // exist within the database\n      if (userAuth) {\n        // Check if the snapShot has updated\n        // I.N.W Check if the database, at the ref, is updated with new data\n        const userRef = await createUserProfileDocument(userAuth); // The moment userRef instantiate, it will\n        // send us a snapshot object, representing the data\n        // related to the user we possibly stored on our database\n\n        userRef.onSnapshot( // Object above (userRef) is where we're going to get the data\n        // related to this user that we just possibly stored.\n        snapShot => {\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data()\n          });\n        });\n      }\n\n      setCurrentUser(userAuth);\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/signin\",\n      component: SignInAndSignUpPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(null, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/user/Github/crown_clothing/src/App.js"],"names":["React","Route","Switch","connect","setCurrentUser","auth","createUserProfileDocument","ShopPage","Header","HomePage","SignInAndSignUpPage","App","Component","unsubscribeFromAuth","componentDidMount","props","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","id","data","componentWillUnmount","render","mapDispatchToProps","dispatch","user"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,IAAT,EAAeC,yBAAf,QAAgD,2BAAhD;AAEA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,mBAAP,MAAgC,2DAAhC;;AAGA,MAAMC,GAAN,SAAkBX,KAAK,CAACY,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCC,mBAFgC,GAEV,IAFU;AAAA;;AAIhCC,EAAAA,iBAAiB,GAAG;AAElB,UAAM;AAACV,MAAAA;AAAD,QAAmB,KAAKW,KAA9B;AAGA,SAAKF,mBAAL,GAA2BR,IAAI,CAACW,kBAAL,CACzB,MAAMC,QAAN,IAAkB;AAChB;AACA;AACA,UAAIA,QAAJ,EAAc;AACZ;AACA;AACA,cAAMC,OAAO,GAAG,MAAMZ,yBAAyB,CAACW,QAAD,CAA/C,CAHY,CAIZ;AACA;AACA;;AACAC,QAAAA,OAAO,CAACC,UAAR,EACE;AACA;AACAC,QAAAA,QAAQ,IAAI;AAEVhB,UAAAA,cAAc,CAAC;AACbiB,YAAAA,EAAE,EAAED,QAAQ,CAACC,EADA;AAEb,eAAGD,QAAQ,CAACE,IAAT;AAFU,WAAD,CAAd;AAID,SATH;AAWD;;AACDlB,MAAAA,cAAc,CAACa,QAAD,CAAd;AACD,KAxBwB,CAA3B;AA0BD;;AAGDM,EAAAA,oBAAoB,GAAE;AACpB,SAAKV,mBAAL;AACD;;AAGDW,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAEf,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAEF,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,SAAZ;AAAsB,MAAA,SAAS,EAAEG,mBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAFF,CADF;AAUD;;AAtD+B;;AA0DlC,MAAMe,kBAAkB,GAAGC,QAAQ,KAAK;AACtCtB,EAAAA,cAAc,EAAEuB,IAAI,IAAID,QAAQ,CAACtB,cAAc,CAACuB,IAAD,CAAf;AADM,CAAL,CAAnC;;AAGA,eAAexB,OAAO,CAAC,IAAD,EAAOsB,kBAAP,CAAP,CAAkCd,GAAlC,CAAf","sourcesContent":["import './App.css';\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { connect } from \"react-redux\";\nimport { setCurrentUser } from \"./redux/user/user.actions\";\nimport { auth, createUserProfileDocument } from \"./firebase/firebase.utils\";\n\nimport ShopPage from './pages/shop/shop.component';\nimport Header from \"./components/header/header.component\";\nimport HomePage from './pages/homepage/homepage.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\n\n\nclass App extends React.Component {\n\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n\n    const {setCurrentUser} = this.props\n\n\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(\n      async userAuth => {\n        // Check if the userAuth\n        // exist within the database\n        if (userAuth) {\n          // Check if the snapShot has updated\n          // I.N.W Check if the database, at the ref, is updated with new data\n          const userRef = await createUserProfileDocument(userAuth);\n          // The moment userRef instantiate, it will\n          // send us a snapshot object, representing the data\n          // related to the user we possibly stored on our database\n          userRef.onSnapshot(\n            // Object above (userRef) is where we're going to get the data\n            // related to this user that we just possibly stored.\n            snapShot => {\n              \n              setCurrentUser({\n                id: snapShot.id,\n                ...snapShot.data()\n              });\n            }\n          );\n        }\n        setCurrentUser(userAuth);\n      }\n    );\n  }\n\n\n  componentWillUnmount(){\n    this.unsubscribeFromAuth();\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/shop\" component={ShopPage} />\n          <Route path=\"/signin\" component={SignInAndSignUpPage} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\nexport default connect(null, mapDispatchToProps)(App);"]},"metadata":{},"sourceType":"module"}