{"ast":null,"code":"var _jsxFileName = \"/Users/user/Github/crown_clothing/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from 'reselect';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { setCurrentUser } from \"./redux/user/user.actions\";\nimport { selectCurrentUser } from './redux/user/user.selectors';\nimport { auth, createUserProfileDocument } from \"./firebase/firebase.utils\";\nimport ShopPage from './pages/shop/shop.component';\nimport Header from \"./components/header/header.component\";\nimport HomePage from './pages/homepage/homepage.component'; // import CheckoutPage from './pages/checkout/checkout.component';\n\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    const {\n      setCurrentUser\n    } = this.props;\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      // Check if the userAuth\n      // exist within the database\n      if (userAuth) {\n        // Check if the snapShot has updated\n        // I.N.W Check if the database, at the ref, is updated with new data\n        const userRef = await createUserProfileDocument(userAuth); // The moment userRef instantiate, it will\n        // send us a snapshot object, representing the data\n        // related to the user we possibly stored on our database\n\n        userRef.onSnapshot( // Object above (userRef) is where we're going to get the data\n        // related to this user that we just possibly stored.\n        snapShot => {\n          console.log(snapShot);\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data()\n          }); // console.log(setCurrentUser);\n        });\n      }\n\n      setCurrentUser(userAuth);\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(RedirectToHomePageSignIn, {\n      currentUser: this.props.currentUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst RedirectToHomePageSignIn = ({\n  currentUser\n}) => React.createElement(Route, {\n  exact: true,\n  path: \"/signin\",\n  render: () => currentUser ? React.createElement(Redirect, {\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }) : React.createElement(SignInAndSignUpPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 84\n  },\n  __self: this\n});\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/user/Github/crown_clothing/src/App.js"],"names":["React","connect","createStructuredSelector","Route","Switch","Redirect","setCurrentUser","selectCurrentUser","auth","createUserProfileDocument","ShopPage","Header","HomePage","SignInAndSignUpPage","App","Component","unsubscribeFromAuth","componentDidMount","props","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","console","log","id","data","componentWillUnmount","render","currentUser","RedirectToHomePageSignIn","mapStateToProps","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\n\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from 'reselect';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nimport { setCurrentUser } from \"./redux/user/user.actions\";\nimport { selectCurrentUser } from './redux/user/user.selectors';\nimport { auth, createUserProfileDocument } from \"./firebase/firebase.utils\";\n\nimport ShopPage from './pages/shop/shop.component';\nimport Header from \"./components/header/header.component\";\nimport HomePage from './pages/homepage/homepage.component';\n// import CheckoutPage from './pages/checkout/checkout.component';\n\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\n\n\nclass App extends React.Component {\n\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n\n    const {setCurrentUser} = this.props;\n\n\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(\n      async userAuth => {\n        // Check if the userAuth\n        // exist within the database\n        if (userAuth) {\n          // Check if the snapShot has updated\n          // I.N.W Check if the database, at the ref, is updated with new data\n          const userRef = await createUserProfileDocument(userAuth);\n          // The moment userRef instantiate, it will\n          // send us a snapshot object, representing the data\n          // related to the user we possibly stored on our database\n          userRef.onSnapshot(\n            // Object above (userRef) is where we're going to get the data\n            // related to this user that we just possibly stored.\n            snapShot => {\n              console.log(snapShot);\n              setCurrentUser(\n                {\n                  id: snapShot.id,\n                  ...snapShot.data()\n                }\n              )\n              // console.log(setCurrentUser);\n            }\n          );\n        }\n        setCurrentUser(userAuth);\n      }\n    );\n  }\n\n\n  componentWillUnmount(){\n    this.unsubscribeFromAuth();\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/shop\" component={ShopPage} />\n          {/* <Route exact path=\"/checkout\" component={CheckoutPage} /> */}\n          <RedirectToHomePageSignIn currentUser={this.props.currentUser} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\n\n\nconst RedirectToHomePageSignIn = ({ currentUser }) => (\n  <Route\n    exact\n    path=\"/signin\"\n    render={\n      () => (currentUser ? <Redirect to=\"/\" /> : <SignInAndSignUpPage />)\n    }\n  />\n);\n\n\n\nconst mapStateToProps = createStructuredSelector ({\n  currentUser: selectCurrentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(\n  mapStateToProps, mapDispatchToProps\n)(App);"]},"metadata":{},"sourceType":"module"}